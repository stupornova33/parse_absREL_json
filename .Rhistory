# sed -i 's/inf/"inf"/'
# run using <Rscript parse_results.R>
setwd("C:/Users/tjarva/parse_absREL_json")
files <- list.files(full.names = TRUE, pattern = '*.json$')
string <- "pal.ABSREL.json"
for(file in files){
global_results <- data.frame(name = character(0), branch = character(0), omega1 = character(0), percent1 = character(0), omega2 = character(0),
percent2 = character(0), omega3 = character(0), percent3 = character(0), stringsAsFactors = FALSE)
name <- strsplit(paste(file), split = string)
simplejson <- fromJSON(file)
index <- 1
branchnames <- list()
branchnames <- simplejson$`branch attributes`$`0`
for(i in branchnames){
branch <- names(branchnames[index])
local_results <- data.frame(name = character(0), branch = character(0), omega1 = character(0), percent1 = character(0), omega2 = character(0),
percent2 = character(0), omega3 = character(0), percent3 = character(0), stringsAsFactors = FALSE)
if(i$`Corrected P-value` > 0.05){
next
} else if(i$`Corrected P-value` <= 0.05){
local_results[1, 1] <- name
local_results[1, 2] <- branch
if(i$`Rate classes` == 2){
local_results[1, 3] <- i$`Rate Distributions`[1,1]
local_results[1, 4] <- i$`Rate Distributions`[1,2]
local_results[1, 5] <- i$`Rate Distributions`[2,1]
local_results[1, 6] <- i$`Rate Distributions`[2,2]
local_results[1, 7] <- "NA"
local_results[1, 8] <- "NA"
} else if(i$`Rate classes` == 3){
local_results[1, 3] <- i$`Rate Distributions`[1,1]
local_results[1, 4] <- i$`Rate Distributions`[1,2]
local_results[1, 5] <- i$`Rate Distributions`[2,1]
local_results[1, 6] <- i$`Rate Distributions`[2,2]
local_results[1, 7] <- i$`Rate Distributions`[3,1]
local_results[1, 8] <- i$`Rate Distributions`[3,2]
}
}
global_results <- dplyr::bind_rows(global_results, local_results)
rm(local_results)
index <- index + 1
}
global_results <- na.omit(global_results)
write.table(global_results, file = "parsed_absrel_json.txt", sep = "\t", row.names = FALSE, col.names = TRUE, append = TRUE, quote = FALSE)
}
#install.packages("jsonlite")
require(jsonlite)
for(file in files){
global_results <- data.frame(name = character(0), branch = character(0), omega1 = character(0), percent1 = character(0), omega2 = character(0),
percent2 = character(0), omega3 = character(0), percent3 = character(0), stringsAsFactors = FALSE)
name <- strsplit(paste(file), split = string)
simplejson <- fromJSON(file)
index <- 1
branchnames <- list()
branchnames <- simplejson$`branch attributes`$`0`
for(i in branchnames){
branch <- names(branchnames[index])
local_results <- data.frame(name = character(0), branch = character(0), omega1 = character(0), percent1 = character(0), omega2 = character(0),
percent2 = character(0), omega3 = character(0), percent3 = character(0), stringsAsFactors = FALSE)
if(i$`Corrected P-value` > 0.05){
next
} else if(i$`Corrected P-value` <= 0.05){
local_results[1, 1] <- name
local_results[1, 2] <- branch
if(i$`Rate classes` == 2){
local_results[1, 3] <- i$`Rate Distributions`[1,1]
local_results[1, 4] <- i$`Rate Distributions`[1,2]
local_results[1, 5] <- i$`Rate Distributions`[2,1]
local_results[1, 6] <- i$`Rate Distributions`[2,2]
local_results[1, 7] <- "NA"
local_results[1, 8] <- "NA"
} else if(i$`Rate classes` == 3){
local_results[1, 3] <- i$`Rate Distributions`[1,1]
local_results[1, 4] <- i$`Rate Distributions`[1,2]
local_results[1, 5] <- i$`Rate Distributions`[2,1]
local_results[1, 6] <- i$`Rate Distributions`[2,2]
local_results[1, 7] <- i$`Rate Distributions`[3,1]
local_results[1, 8] <- i$`Rate Distributions`[3,2]
}
}
global_results <- dplyr::bind_rows(global_results, local_results)
rm(local_results)
index <- index + 1
}
global_results <- na.omit(global_results)
write.table(global_results, file = "parsed_absrel_json.txt", sep = "\t", row.names = FALSE, col.names = TRUE, append = TRUE, quote = FALSE)
}
string <- "p2n.ABSREL.json"
for(file in files){
global_results <- data.frame(name = character(0), branch = character(0), omega1 = character(0), percent1 = character(0), omega2 = character(0),
percent2 = character(0), omega3 = character(0), percent3 = character(0), stringsAsFactors = FALSE)
name <- strsplit(paste(file), split = string)
simplejson <- fromJSON(file)
index <- 1
branchnames <- list()
branchnames <- simplejson$`branch attributes`$`0`
for(i in branchnames){
branch <- names(branchnames[index])
local_results <- data.frame(name = character(0), branch = character(0), omega1 = character(0), percent1 = character(0), omega2 = character(0),
percent2 = character(0), omega3 = character(0), percent3 = character(0), stringsAsFactors = FALSE)
if(i$`Corrected P-value` > 0.05){
next
} else if(i$`Corrected P-value` <= 0.05){
local_results[1, 1] <- name
local_results[1, 2] <- branch
if(i$`Rate classes` == 2){
local_results[1, 3] <- i$`Rate Distributions`[1,1]
local_results[1, 4] <- i$`Rate Distributions`[1,2]
local_results[1, 5] <- i$`Rate Distributions`[2,1]
local_results[1, 6] <- i$`Rate Distributions`[2,2]
local_results[1, 7] <- "NA"
local_results[1, 8] <- "NA"
} else if(i$`Rate classes` == 3){
local_results[1, 3] <- i$`Rate Distributions`[1,1]
local_results[1, 4] <- i$`Rate Distributions`[1,2]
local_results[1, 5] <- i$`Rate Distributions`[2,1]
local_results[1, 6] <- i$`Rate Distributions`[2,2]
local_results[1, 7] <- i$`Rate Distributions`[3,1]
local_results[1, 8] <- i$`Rate Distributions`[3,2]
}
}
global_results <- dplyr::bind_rows(global_results, local_results)
rm(local_results)
index <- index + 1
}
global_results <- na.omit(global_results)
write.table(global_results, file = "parsed_absrel_json.txt", sep = "\t", row.names = FALSE, col.names = TRUE, append = TRUE, quote = FALSE)
}
# remember to replace Inf values with "Inf" using
# sed -i 's/inf/"inf"/'
# run using <Rscript parse_results.R>
setwd("C:/Users/tjarva/parse_absREL_json")
files <- list.files(full.names = TRUE, pattern = '*.json$')
string <- ".fa.aln.p2n.ABSREL.json"
for(file in files){
global_results <- data.frame(name = character(0), branch = character(0), omega1 = character(0), percent1 = character(0), omega2 = character(0),
percent2 = character(0), omega3 = character(0), percent3 = character(0), stringsAsFactors = FALSE)
name <- strsplit(paste(file), split = string)
simplejson <- fromJSON(file)
index <- 1
branchnames <- list()
branchnames <- simplejson$`branch attributes`$`0`
for(i in branchnames){
branch <- names(branchnames[index])
local_results <- data.frame(name = character(0), branch = character(0), omega1 = character(0), percent1 = character(0), omega2 = character(0),
percent2 = character(0), omega3 = character(0), percent3 = character(0), stringsAsFactors = FALSE)
if(i$`Corrected P-value` > 0.05){
next
} else if(i$`Corrected P-value` <= 0.05){
local_results[1, 1] <- name
local_results[1, 2] <- branch
if(i$`Rate classes` == 2){
local_results[1, 3] <- i$`Rate Distributions`[1,1]
local_results[1, 4] <- i$`Rate Distributions`[1,2]
local_results[1, 5] <- i$`Rate Distributions`[2,1]
local_results[1, 6] <- i$`Rate Distributions`[2,2]
local_results[1, 7] <- "NA"
local_results[1, 8] <- "NA"
} else if(i$`Rate classes` == 3){
local_results[1, 3] <- i$`Rate Distributions`[1,1]
local_results[1, 4] <- i$`Rate Distributions`[1,2]
local_results[1, 5] <- i$`Rate Distributions`[2,1]
local_results[1, 6] <- i$`Rate Distributions`[2,2]
local_results[1, 7] <- i$`Rate Distributions`[3,1]
local_results[1, 8] <- i$`Rate Distributions`[3,2]
}
}
global_results <- dplyr::bind_rows(global_results, local_results)
rm(local_results)
index <- index + 1
}
global_results <- na.omit(global_results)
write.table(global_results, file = "parsed_absrel_json.txt", sep = "\t", row.names = FALSE, col.names = TRUE, append = TRUE, quote = FALSE)
}
files
strsplit(paste(file), split = string)
simplejson <- strsplit(paste(file), split = string)
simplejson
simplejson`$branch attributes`
simplejson`$branch
simplejson
name <- strsplit(paste(file), split = string)
simplejson <- fromJSON(file[1])
simplejson
branchnames <- simplejson$`branch attributes`$`0`
# remember to replace Inf values with "Inf" using
# sed -i 's/inf/"inf"/'
# run using <Rscript parse_results.R>
setwd("C:/Users/tjarva/parse_absREL_json")
files <- list.files(full.names = TRUE, pattern = '*.json$')
string <- ".fa.aln.p2n.ABSREL.json"
for(file in files){
global_results <- data.frame(name = character(0), branch = character(0), omega1 = character(0), percent1 = character(0), omega2 = character(0),
percent2 = character(0), omega3 = character(0), percent3 = character(0), stringsAsFactors = FALSE)
name <- strsplit(paste(file), split = string)
simplejson <- fromJSON(file)
index <- 1
branchnames <- list()
branchnames <- simplejson$`branch attributes`$`0`
for(i in branchnames){
branch <- names(branchnames[index])
local_results <- data.frame(name = character(0), branch = character(0), omega1 = character(0), percent1 = character(0), omega2 = character(0),
percent2 = character(0), omega3 = character(0), percent3 = character(0), stringsAsFactors = FALSE)
if(i$`Corrected P-value` > 0.05){
print("low p-value")
next
} else if(i$`Corrected P-value` <= 0.05){
print("good p-value")
print(paste(name, branch, i$`Corrected P-value`, sep = " "))
local_results[1, 1] <- name
local_results[1, 2] <- branch
if(i$`Rate classes` == 2){
local_results[1, 3] <- i$`Rate Distributions`[1,1]
local_results[1, 4] <- i$`Rate Distributions`[1,2]
local_results[1, 5] <- i$`Rate Distributions`[2,1]
local_results[1, 6] <- i$`Rate Distributions`[2,2]
local_results[1, 7] <- "NA"
local_results[1, 8] <- "NA"
} else if(i$`Rate classes` == 3){
local_results[1, 3] <- i$`Rate Distributions`[1,1]
local_results[1, 4] <- i$`Rate Distributions`[1,2]
local_results[1, 5] <- i$`Rate Distributions`[2,1]
local_results[1, 6] <- i$`Rate Distributions`[2,2]
local_results[1, 7] <- i$`Rate Distributions`[3,1]
local_results[1, 8] <- i$`Rate Distributions`[3,2]
}
}
global_results <- dplyr::bind_rows(global_results, local_results)
rm(local_results)
index <- index + 1
}
global_results <- na.omit(global_results)
write.table(global_results, file = "parsed_absrel_json.txt", sep = "\t", row.names = FALSE, col.names = TRUE, append = TRUE, quote = FALSE)
}
################################################################################################################
##
file <- read.csv("C:/Users/tjarva/Desktop/filterRun/select_tmp")
View(file)
################################################################################################################
##
file <- read.csv("C:/Users/tjarva/Desktop/filterRun/select_tmp", sep = "\t")
View(file)
################################################################################################################
##
file <- read.csv("C:/Users/tjarva/Desktop/filterRun/select_tmp", sep = "\t")
View(file)
################################################################################################################
##
file <- read.csv("C:/Users/tjarva/Desktop/filterRun/select_tmp", sep = "\t", header = FALSE)
file <- file %>% selec(-c())
file <- file %>% selec(-c(V3))
################################################################################################################
library(dplyr)
file <- file %>% selec(-c(V3))
file <- file %>% select(-c(V3))
file <- file %>% summarize(file, group_by(V2))
file <- file %>% group_by(V2) %>% summarize()
View(file)
file <- read.csv("C:/Users/tjarva/Desktop/filterRun/select_tmp", sep = "\t", header = FALSE)
file <- file %>% select(-c(V3))
View(file)
file <- reshape(file, idvar = "V2", timevar = "V1", direction = "wide")
View(file)
file <- reshape(file, idvar = "V1", timevar = "V2", direction = "wide")
file <- read.csv("C:/Users/tjarva/Desktop/filterRun/select_tmp", sep = "\t", header = FALSE)
file <- file %>% select(-c(V3))
file <- reshape(file, idvar = "V1", timevar = "V2", direction = "wide")
View(file)
file <- read.csv("C:/Users/tjarva/Desktop/filterRun/select_tmp", sep = "\t", header = FALSE)
file <- file %>% select(-c(V3))
file <- acast(file, x~y, value.var="V1")
>acast
?acast
results <- pivot_wider(data = file, names_from = V2, values_from = V1)
?pivot_wider
?pivot_wider()
tidyverse::results <- pivot_wider(data = file, names_from = V2, values_from = V1)
tidyr::results <- pivot_wider(data = file, names_from = V2, values_from = V1)
tidyr::results %>% pivot_wider(data = file, names_from = V2, values_from = V1)
library(tidyr)
file %>% pivot_wider(data = file, names_from = V2, values_from = V1)
View(file)
?filter()
saw <- file %>% filter(V2 == "sawfish")
cat <- file %>% filter(V2 == "catshark")
coel <- file %>% filter(V2 == "coelacanth")
node <- file %>% filter(V2 == "Node")
skate <- file %>% filter(V2 == "skate")
elshark <- file %>% filter(V2 == "elshark")
View(elshark)
elshark <- file %>% filter(V2 == "elephantshark")
View(elshark)
bind1 <- cbind(saw, cat)
bind1 <- dplyr::rbind.fill(saw, cat)
bind1 <- plyr::rbind.fill(saw, cat)
View(bind1)
saw <- file %>% filter(V2 == "sawfish") %>% select(-c(V2)) %>% rename("sawfish" = V1)
View(saw)
cat <- file %>% filter(V2 == "catshark") %>% select(-c(V2)) %>% rename("catshark" = V1)
coel <- file %>% filter(V2 == "coelacanth") %>% select(-c(V2)) %>% rename("coelacanth" = V1)
node <- file %>% filter(V2 == "Node") %>% select(-c(V2)) %>% rename("Node" = V1)
skate <- file %>% filter(V2 == "skate") %>% select(-c(V2)) %>% rename("skate" = V1)
elshark <- file %>% filter(V2 == "elephantshark") %>% select(-c(V2)) %>% rename("elephantshark" = V1)
bind1 <- plyr::rbind.fill(saw, cat)
View(bind1)
bind2 <- plyr::rbind.fill(bind1, coel)
View(bind2)
bind3 <- plyr::rbind.fill(bind2, node)
View(bind3)
bind4 <- plyr::rbind.fill(bind3, skate)
bind5 <- plyr::rbind.fill(bind4, elshark)
View(bind4)
View(bind5)
gene_list <- read.csv("C:/Users/tjarva/Desktop/filterRun/uniq_select_genes")
View(gene_list)
gene_list <- read.csv("C:/Users/tjarva/Desktop/filterRun/uniq_select_genes", header = FALSE)
results <- data.frame(catshark = character(300L), coelacanth = character(300L), elephantshark = character(300L),
Node = character(300L), skate = character(300L), sawfish = character(300L))
View(results)
row.names(results) <- gene_list
rownames(results) <- gene_list
View(gene_list)
rownames(results) <- as.vector(gene_list)
rownames(results)
typeof(gene_list)
gene_list
view(gene_list)
View(gene_list)
gene_list <- as.vector(gene_list)
gene_list
typeof(gene_list)
gene_list <- scan("C:/Users/tjarva/Desktop/filterRun/uniq_select_genes", character())
rownames(results) <- as.vector(gene_list)
View(results)
bind1 <- plyr::rbind.fill(results, cat)
View(bind1)
View(cat)
gene_list <- read.csv("C:/Users/tjarva/Desktop/filterRun/uniq_select_genes", header = FALSE)
results$gene <- gene_list$V1
View(results)
bind1 <- plyr::rbind.fill(results, cat)
View(bind1)
bind1 <- dplyr::bind_rows(results, cat)
View(bind1)
View(saw)
saw <- file %>% filter(V2 == "sawfish") %>% select(-c(V2))
cat <- file %>% filter(V2 == "catshark") %>% select(-c(V2))
coel <- file %>% filter(V2 == "coelacanth") %>% select(-c(V2))
node <- file %>% filter(V2 == "Node") %>% select(-c(V2))
skate <- file %>% filter(V2 == "skate") %>% select(-c(V2))
elshark <- file %>% filter(V2 == "elephantshark") %>% select(-c(V2))
results <- data.frame(catshark = character(300L), coelacanth = character(300L), elephantshark = character(300L),
Node = character(300L), skate = character(300L), sawfish = character(300L))
View(saw)
View(results)
results$gene <- gene_list$V1
bind1 <- merge(results, cat)
View(bind1)
bind1 <- merge(cat, coel, by = "V1")
View(bind1)
bind1 <- merge(cat, coel, by = "V1", all = TRUE)
View(bind1)
bind1 <- merge(cat, coel, by = "V1", all.x = TRUE)
View(bind1)
bind1 <- inner_join(cat, coel, by = "V1")
View(bind1)
View(bind1)
bind1 <- inner_join(cat, coel, by = "V1")
rm(list=ls())
################################################################################################################
library(dplyr)
library(tidyr)
file <- read.csv("C:/Users/tjarva/Desktop/filterRun/select_tmp", sep = "\t", header = FALSE)
file <- file %>% select(-c(V3))
saw <- file %>% filter(V2 == "sawfish") %>% select(-c(V2))
cat <- file %>% filter(V2 == "catshark") %>% select(-c(V2))
coel <- file %>% filter(V2 == "coelacanth") %>% select(-c(V2))
node <- file %>% filter(V2 == "Node") %>% select(-c(V2))
skate <- file %>% filter(V2 == "skate") %>% select(-c(V2))
elshark <- file %>% filter(V2 == "elephantshark") %>% select(-c(V2))
results <- data.frame(catshark = character(300L), coelacanth = character(300L), elephantshark = character(300L),
Node = character(300L), skate = character(300L), sawfish = character(300L))
gene_list <- read.csv("C:/Users/tjarva/Desktop/filterRun/uniq_select_genes", header = FALSE)
results$gene <- gene_list$V1
bind1 <- inner_join(cat, coel, by = "V1")
bind1 <- full_join(cat, coel, by = "V1")
View(bind1)
bind1 <- full_join(cat, coel, by = "V1", keep = TRUE)
View(bind1)
View(bind1)
bind2 <- full_join(bind1, cat,keep = TRUE)
bind2 <- full_join(bind1, cat,by = character(), keep = TRUE)
View(bind2)
rm(bind2)
bind1 <- full_join(cat, coel, by = "V1", keep = TRUE) %>% rename("cat" = V1.x, "coel" = V1.y)
bind2 <- full_join(bind1, cat,by = c("V1", "cat", "coel"), keep = TRUE)
View(bind1)
View(elshark)
bind2 <- full_join(bind1, elshark, by = c("cat", "coel", "V1"), keep = TRUE)
bind2 <- full_join(bind1, elshark, by = c("cat" = "V1"), keep = TRUE)
View(bind2)
bind2 <- full_join(bind1, elshark, by = c("cat" = "V1"), keep = TRUE) %>% rename("elshark" = V1)
View(bind2)
bind2 <- full_join(bind1, elshark, by = c("cat" = "V1"), keep = TRUE) %>% rename("elshark" = V1)
bind3 <- full_join(bind2, Node, by = c("elshark" = "V1"), keep = TRUE) %>% rename("Node" = V1)
View(bind2)
bind3 <- full_join(bind2, Node, by = c("elshark" = "V1"), keep = TRUE)
bind3 <- full_join(bind2, node, by = c("elshark" = "V1"), keep = TRUE) %>% rename("Node" = V1)
bind4 <- full_join(bind3, skate, by = c("Node" = "V1"), keep = TRUE) %>% rename("skate" = V1)
bind5 <- full_join(bind4, sawfish, by = c("skate" = "V1"), keep = TRUE) %>% rename("sawfish" = V1)
bind5 <- full_join(bind4, saw, by = c("skate" = "V1"), keep = TRUE) %>% rename("sawfish" = V1)
View(bind5)
bind2 <- full_join(bind1, elshark, by = c("cat" = "V1", "coel" = "V1"), keep = TRUE) %>% rename("elshark" = V1)
bind1 <- full_join(cat, coel, by = "V1", keep = FALSE) #%>% rename("cat" = V1.x, "coel" = V1.y)
View(bind1)
View(bind5)
View(cat)
View(coel)
View(elshark)
View(node)
View(saw)
View(skate)
View(bind1)
View(cat)
View(coel)
bind1 <- full_join(cat, coel, by = "V1", keep = TRUE) #%>% rename("cat" = V1.x, "coel" = V1.y)
View(bind1)
View(cat)
cat1 <- data.frame(gene = cat$V1, species = "cat")
View(cat1)
View(file)
df <- reshape2::dcast(file, V1 ~ V2)
View(df)
View(df)
write.csv(df, file = "select_results", sep = "\t", col.names = TRUE, quote = FALSE)
pwd()
getwd()
library(topGO)
library(Rgraphviz)
geneID2GO <- readMappings("C:/Users/tjarva/Desktop/filterRun/uniq_go_universe")
geneUniverse <- names(geneID2GO)
genesOfInterest <- read.table("C:/Users/tjarva/Desktop/filterRun/sawfish_select.txt", header = FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdataBP <- new("topGOdata", description = "myAnalysis",
ontology = "BP", allGenes=geneList,
annot = annFUN.gene2GO,gene2GO = geneID2GO)
resultFisherBP <- runTest(myGOdataBP, algorithm = "classic", statistic = "fisher")
allResBP <- GenTable(myGOdataBP, classicFisher = resultFisherBP,
orderBy = "resultFisherBP", ranksOf = "classicFisher", topNodes = 50)
write.table(allResBP, file = "group2_BP.txt")
pdf("group2_BP.pdf")
showSigOfNodes(myGOdataBP, score(resultFisherBP), firstSigNodes = 5, useInfo = "all")
dev.off()
myGOdataMF <- new("topGOdata", description = "myAnalysis",
ontology = "MF", allGenes=geneList,
annot = annFUN.gene2GO,gene2GO = geneID2GO)
resultFisherMF <- runTest(myGOdataMF, algorithm = "classic", statistic = "fisher")
allResMF <- GenTable(myGOdataMF, classicFisher = resultFisherMF,
orderBy = "resultFisherMF", ranksOf = "classicFisher", topNodes = 50)
write.table(allResMF, file = "group2_MF.txt")
pdf("group2_MF.pdf")
showSigOfNodes(myGOdataMF, score(resultFisherMF), firstSigNodes = 5, useInfo = "all")
dev.off()
myGOdataCC <- new("topGOdata", description = "myAnalysis",
ontology = "CC", allGenes=geneList,
annot = annFUN.gene2GO,gene2GO = geneID2GO)
resultFisherCC <- runTest(myGOdataCC, algorithm = "classic", statistic = "fisher")
allResCC <- GenTable(myGOdataCC, classicFisher = resultFisherCC,
orderBy = "resultFisherCC", ranksOf = "classicFisher", topNodes = 50)
write.table(allResCC, file = "group2_CC.txt")
pdf("group2_CC.pdf")
showSigOfNodes(myGOdataCC, score(resultFisherCC), firstSigNodes = 5, useInfo = "all")
dev.off()
rm(list=ls())
geneID2GO <- readMappings("C:/Users/tjarva/Desktop/filterRun/go_universe")
geneUniverse <- names(geneID2GO)
genesOfInterest <- read.table("C:/Users/tjarva/Desktop/filterRun/sawfish_select.txt", header = FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdataBP <- new("topGOdata", description = "myAnalysis",
ontology = "BP", allGenes=geneList,
annot = annFUN.gene2GO,gene2GO = geneID2GO)
resultFisherBP <- runTest(myGOdataBP, algorithm = "classic", statistic = "fisher")
allResBP <- GenTable(myGOdataBP, classicFisher = resultFisherBP,
orderBy = "resultFisherBP", ranksOf = "classicFisher", topNodes = 50)
write.table(allResBP, file = "group2_BP.txt")
pdf("group2_BP.pdf")
showSigOfNodes(myGOdataBP, score(resultFisherBP), firstSigNodes = 5, useInfo = "all")
dev.off()
myGOdataMF <- new("topGOdata", description = "myAnalysis",
ontology = "MF", allGenes=geneList,
annot = annFUN.gene2GO,gene2GO = geneID2GO)
resultFisherMF <- runTest(myGOdataMF, algorithm = "classic", statistic = "fisher")
allResMF <- GenTable(myGOdataMF, classicFisher = resultFisherMF,
orderBy = "resultFisherMF", ranksOf = "classicFisher", topNodes = 50)
write.table(allResMF, file = "group2_MF.txt")
pdf("group2_MF.pdf")
showSigOfNodes(myGOdataMF, score(resultFisherMF), firstSigNodes = 5, useInfo = "all")
dev.off()
myGOdataCC <- new("topGOdata", description = "myAnalysis",
ontology = "CC", allGenes=geneList,
annot = annFUN.gene2GO,gene2GO = geneID2GO)
resultFisherCC <- runTest(myGOdataCC, algorithm = "classic", statistic = "fisher")
allResCC <- GenTable(myGOdataCC, classicFisher = resultFisherCC,
orderBy = "resultFisherCC", ranksOf = "classicFisher", topNodes = 50)
write.table(allResCC, file = "group2_CC.txt")
pdf("group2_CC.pdf")
showSigOfNodes(myGOdataCC, score(resultFisherCC), firstSigNodes = 5, useInfo = "all")
dev.off()
